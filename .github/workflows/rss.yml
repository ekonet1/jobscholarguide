name: RSS to Jekyll Posts

on:
  schedule:
    - cron: "0 */6 * * *"   # runs every 6 hours
  workflow_dispatch:        # lets you trigger manually

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install feedparser
        run: pip install feedparser

      - name: Fetch Blogger RSS and convert to Jekyll posts
        run: |
          python - <<'EOF'
          import feedparser, os, re, datetime

          feed = feedparser.parse("https://jobscholarguide.blogspot.com/feeds/posts/default?alt=rss")
          os.makedirs("_posts", exist_ok=True)

          for entry in feed.entries:
              # format file name
              date = datetime.datetime(*entry.published_parsed[:6]).strftime("%Y-%m-%d")
              slug = re.sub(r'[^a-z0-9]+', '-', entry.title.lower()).strip('-')
              filename = f"_posts/{date}-{slug}.md"

              if not os.path.exists(filename):
                  # Summary/excerpt
                  summary = entry.get("summary", "").replace("\n", " ").strip()
                  summary = summary.replace('"', "'")  # escape quotes

                  # Tags if available
                  tags = [t.term for t in entry.get("tags", [])] if "tags" in entry else []

                  # Featured image if Blogger RSS provides one
                  image = None
                  if "media_thumbnail" in entry:
                      image = entry.media_thumbnail[0]['url']
                  elif "media_content" in entry:
                      image = entry.media_content[0]['url']

                  # Escape YAML-breaking characters
                  title = entry.title.replace('"', "'")

                  with open(filename, "w", encoding="utf-8") as f:
                      f.write("---\n")
                      f.write("layout: post\n")
                      f.write(f'title: "{title}"\n')
                      f.write(f"date: {date}\n")
                      f.write(f'description: "{summary}"\n')
                      f.write(f"tags: {tags}\n")
                      f.write(f'canonical_url: "{entry.link}"\n')
                      if image:
                          f.write(f'image: "{image}"\n')
                      f.write("---\n\n")

                      # Featured image
                      if image:
                          f.write(f"![Featured Image]({image})\n\n")

                      # --- Excerpt handling ---
                      if summary:
                          # Use first sentence as excerpt
                          sentences = summary.split(". ")
                          first_sentence = sentences[0] + "." if sentences else summary
                          f.write(f"{first_sentence}\n\n<!--more-->\n\n")

                          # Add the rest of the summary AFTER the excerpt separator
                          remaining = summary.replace(first_sentence, "").strip()
                          if remaining:
                              f.write(f"{remaining}\n\n")

                      f.write(f"ðŸ‘‰ [Read full article here]({entry.link})\n")
          EOF

      - name: Commit and push
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add _posts
          git commit -m "Update from Blogger RSS" || echo "No changes"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
